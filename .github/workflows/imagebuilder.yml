# This is free software, lisence use MIT.
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: image builder-ci

on:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:
#  workflow_dispatch:
#    inputs:
#      clean_cache:
#        description: 'Clear caches'
#        required: false
#        type: boolean

# push:
#   branches: 
#     - master
  # schedule:
  #   - cron: 0 20 * * *
#  release:
#    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get update
          sudo -E apt-get -qq install build-essential clang bison python3-distutils  file asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler ccache xsltproc rename antlr3 gperf wget curl swig rsync
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
          # 可用空间仅有31GB,编译需要约34-38GB空间
          sudo rm -rf /usr/share/dotnet
          # 可获得3GB空间
          df -h
          sudo rm -rf /usr/local/lib/android
          # 可获得11GB空间
          df -h
          sudo rm -rf /opt/ghc
          # 可获得0GB空间
          df -h
      - name: git clone openwrt image builder
        run: |
          #curl -fL -m 300 -o sdk.tar.xz https://downloads.openwrt.org/releases/19.07.10/targets/ipq806x/generic/openwrt-sdk-19.07.10-ipq806x-generic_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz
          curl -fL -m 300 -o sdk.tar.xz https://downloads.openwrt.org/releases/22.03.6/targets/ipq806x/generic/openwrt-sdk-22.03.6-ipq806x-generic_gcc-11.2.0_musl_eabi.Linux-x86_64.tar.xz
          mkdir openwrt
          tar -xJf sdk.tar.xz -C openwrt
          rm -Rf sdk.tar.xz
          cd openwrt
          cp -rf ./openwrt-sdk*/. ./ || true
          du -h --max-depth=2
      - name: add kenzo8/small-packages and small and Update feeds
        run: |
          cd ./openwrt
          sed -i '/	refresh_config();/d' scripts/feeds
          ls -la
          echo "src-git base https://github.com/openwrt/openwrt.git;openwrt-22.03" > feeds.conf
          echo "src-git packages https://github.com/openwrt/packages.git;openwrt-22.03" >> feeds.conf
          echo "src-git luci https://github.com/openwrt/luci.git;openwrt-22.03" >> feeds.conf
          echo "src-git routing https://git.openwrt.org/feed/routing.git;openwrt-22.03"  >> feeds.conf
          #echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages.git;main" >> feeds.conf
          #echo "src-git passwall https://github.com/xiaorouji/openwrt-passwall.git;main" >> feeds.conf
          echo "src-git kenzo https://github.com/kenzok8/openwrt-packages.git" >> feeds.conf
          echo "src-git small https://github.com/kenzok8/small.git" >> feeds.conf
          ./scripts/feeds update -a
          #./scripts/feeds install -d n luci-app-passwall
          ./scripts/feeds install -a
          rm -rf package/feeds/kenzo/*alist
          rm -rf package/feeds/kenzo/*gost
          rm -rf package/feeds/small/*bandwidthd
          rm -rf package/feeds/small/*kodexplorer
          rm -rf package/feeds/small/{base-files,dnsmasq,firewall*,fullconenat,libnftnl,nftables,ppp,opkg,ucl,upx,vsftpd-alt,miniupnpd-iptables,wireless-regdb}
          rm -rf package/feeds/luci/themes/luci-theme-argon && rm -rf package/feeds/other/{luci-app-adguardhome,luci-app-dockerman}
          # compiling openwrt-19.07 need use branch master-libcap to replace ./feeds/packages/libs/libcap 
          # rm -rf feeds/packages/libs/libcap
          # svn co https://github.com/openwrt/openwrt/trunk/package/libs/libcap ./feeds/packages/libs/libcap
          # svn co https://github.com/coolsnowwolf/lede/trunk/package/libs/libcap ./feeds/packages/libs/libcap
          #sed -i "s/#push @mirrors, 'https:\/\/mirror1.openwrt.org';/push @mirrors, 'https:\/\/sources.cdn.openwrt.org';/g" ./scripts/download.pl
          # in current mode feeds install can not install kenzok8/small-package to package/feeds/kenzo
          #cd ./package
          #git clone https://github.com/kenzok8/openwrt-package.git ./custom
          #a few of small-package have exist in openwrt-package
          #git clone https://github.com/kenzok8/small-package.git ./custom
          #git clone https://github.com/xiaorouji/openwrt-passwall-packages.git ./custom
          #git clone https://github.com/xiaorouji/openwrt-passwall.git ./custom1
          #mv ./custom1/* ./custom/
          #cd ../
          rm -rf feeds/packages/lang/golang
          git clone https://github.com/sbwml/packages_lang_golang -b 21.x feeds/packages/lang/golang
          #rm -rf $(find ./. -maxdepth 1 -type d -name "diy" -or -name ".git*" -or -name "my*")
          #rm -rf $(find ./. -maxdepth 1 -type d -name ".git*")
          #rm -rf $(find ./. -maxdepth 1 -type d -name "my*")
          # here is 20230906 22.03 can not download some code
          #cd ../
          mkdir -p ./dl
          cd ./dl
          wget -c -r -nd -np http://204.13.154.47:8080/chfs/shared/openwrt-dl/
          rm -rf $(find -name "index.html*")
          cd ../
          du -h ./ --max-depth=1
          rm -Rf tmp
      - name: Generate configuration file
        run: |
          cd ./openwrt
          rm -f ./.config*
          touch ./.config
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:
          cat >> .config <<EOF
          CONFIG_LUCI_CSSTIDY=n
          CONFIG_AUTOREBUILD=y
          CONFIG_AUTOREMOVE=n
          CONFIG_ALL=n
          CONFIG_ALL_NONSHARED=n
          CONFIG_ALL_KMODS=n
          CONFIG_SIGNED_PACKAGES=n
          CONFIG_SIGNATURE_CHECK=n
          #CONFIG_XRAY_PROVIDE_V2RAY=y
          #CONFIG_PACKAGE_dnsmasq=n
          #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_v2ray-plugin=n
          #CONFIG_v2ray-plugin_INCLUDE_GOPROXY=n
          #CONFIG_V2RAY_CORE_COMPRESS_UPX=n
          #CONFIG_XRAY_CORE_COMPRESS_UPX=n
          CONFIG_PACKAGE_luci-app-turboacc=y
          CONFIG_PACKAGE_TURBOACC_INCLUDE_OFFLOADING=y
          CONFIG_PACKAGE_TURBOACC_INCLUDE_SHORTCUT_FE=y
          CONFIG_PACKAGE_TURBOACC_INCLUDE_BBR_CCA=y
          CONFIG_PACKAGE_TURBOACC_INCLUDE_DNSFORWARDER=n
          CONFIG_PACKAGE_TURBOACC_INCLUDE_DNSPROXY=n
          #CONFIG_PACKAGE_luci-app-store=n
          #CONFIG_PACKAGE_openvpn-mbedtls=n
          #CONFIG_PACKAGE_openvpn-wolfssl=n
          #CONFIG_PACKAGE_luci-app-unblockmusic_INCLUDE_UnblockNeteaseMusic_NodeJS=y
          CONFIG_NGINX_DAV=y
          CONFIG_COREMARK_OPTIMIZE_O3=y
          CONFIG_COREMARK_ENABLE_MULTITHREADING=y
          CONFIG_TARGET_ipq806x=y
          CONFIG_TARGET_ipq806x_generic=y
          CONFIG_TARGET_ipq806x_generic_DEVICE_linksys_ea8500=y
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_PACKAGE_luci-app-advanced-reboot=m
          CONFIG_PACKAGE_luci-app-adblock=m
          CONFIG_PACKAGE_luci-app-adbyby-plus=m
          CONFIG_PACKAGE_luci-app-adguardhome=m
          CONFIG_PACKAGE_luci-app-bypass=m
          CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Shadowsocks_Libev_Client=m
          CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Shadowsocks_Libev_Server=m
          CONFIG_PACKAGE_luci-app-bypass_INCLUDE_ShadowsocksR_Libev_Client=m
          CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Simple_Obfs=m
          CONFIG_PACKAGE_luci-app-bypass_INCLUDE_V2ray_plugin=m
          CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Xray=m
          CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Trojan=m
          CONFIG_PACKAGE_luci-app-bypass_INCLUDE_NaiveProxy=m
          CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Kcptun=m
          CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Hysteria=n
          CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Socks5_Proxy=m
          CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Socks_Server=m
          CONFIG_PACKAGE_luci-app-clash=m
          CONFIG_PACKAGE_luci-app-control-timewol=m
          CONFIG_PACKAGE_luci-app-control-webrestriction=m
          CONFIG_PACKAGE_luci-app-control-weburl=m
          CONFIG_PACKAGE_luci-app-ddns=m
          CONFIG_PACKAGE_luci-app-ddnsto=m
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_btrfs_progs=m
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_lsblk=m
          CONFIG_PACKAGE_luci-app-firewall=m
          CONFIG_PACKAGE_luci-app-iptvhelper=m
          CONFIG_PACKAGE_luci-app-omcproxy=m
          CONFIG_PACKAGE_luci-app-openclash=m
          CONFIG_PACKAGE_luci-app-opkg=m
          CONFIG_PACKAGE_luci-app-passwall=m
          CONFIG_PACKAGE_luci-app-passwall_Iptables_Transparent_Proxy=m
          CONFIG_PACKAGE_luci-app-passwall_Nftables_Transparent_Proxy=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Brook=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Hysteria=n
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_NaiveProxy=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Server=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_GO=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Geodata=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=m
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray_Plugin=m
          CONFIG_PACKAGE_luci-app-passwall2=m
          CONFIG_PACKAGE_luci-app-passwall2_Transparent_Proxy=m
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Brook=m
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Hysteria=n
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_NaiveProxy=m
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Libev_Client=m
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Rust_Client=m
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_ShadowsocksR_Libev_Client=m
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Simple_Obfs=m
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_V2ray=m
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_V2ray_Plugin=m
          CONFIG_PACKAGE_luci-app-qbittorrent_static=m
          CONFIG_PACKAGE_luci-app-ramfree=m
          CONFIG_PACKAGE_luci-app-ssr-plus=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Libev_Client=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Libev_Server=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ChinaDNS_NG=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Hysteria=n
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_IPT2Socks=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_NaiveProxy=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Redsocks2=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Simple_Obfs=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_V2ray_Plugin=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Libev_Client=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Libev_Server=m
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=m
          CONFIG_PACKAGE_luci-app-timecontrol=m
          CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_SHORTCUT_FE_DRV=m
          CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_BBR_CCA=m
          CONFIG_PACKAGE_luci-app-udpxy=m
          CONFIG_PACKAGE_luci-app-unblockmusic_INCLUDE_UnblockNeteaseMusic_Go=m
          CONFIG_PACKAGE_luci-app-upnp=m
          CONFIG_PACKAGE_luci-app-vlmcsd=m
          CONFIG_PACKAGE_luci-app-vssr=m
          CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Xray=m
          CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Trojan=m
          CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Kcptun=m
          CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Xray_plugin=m
          CONFIG_PACKAGE_luci-app-vssr_INCLUDE_ShadowsocksR_Libev_Server=m
          CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Hysteria=n
          CONFIG_PACKAGE_luci-app-wol=m
          CONFIG_PACKAGE_luci-i18n-advanced-reboot-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-adblock-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-adbyby-plus-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-base-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-bypass-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-control-webrestriction-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-control-weburl-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-ddns-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-ddnsto-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-firewall-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-iptvhelper-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-omcproxy-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-opkg-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-passwall-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-passwall2-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-ramfree-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-ssr-plus-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-timecontrol-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-udpxy-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-upnp-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-vlmcsd-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-vssr-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-wol-zh-cn=m
          CONFIG_PACKAGE_chinadns-ng=m
          CONFIG_PACKAGE_ddns-scripts=m
          CONFIG_PACKAGE_ddns-scripts-cloudflare=m
          CONFIG_PACKAGE_ddns-scripts-services=m
          CONFIG_PACKAGE_ddns-scripts_aliyun=m
          CONFIG_PACKAGE_ddns-scripts_dnspod=m
          CONFIG_PACKAGE_dns2socks=m
          CONFIG_PACKAGE_dns2tcp=m
          CONFIG_PACKAGE_pdnsd-alt=m
          CONFIG_PACKAGE_v2ray-geoip=m
          CONFIG_PACKAGE_v2ray-geosite=m
          CONFIG_PACKAGE_ip-full=m
          CONFIG_PACKAGE_brook=m
          CONFIG_PACKAGE_cgi-io=m
          CONFIG_PACKAGE_ddnsto=m
          CONFIG_PACKAGE_haproxy=m
          CONFIG_PACKAGE_kcptun-client=m
          CONFIG_PACKAGE_microsocks=m
          CONFIG_PACKAGE_naiveproxy=m
          CONFIG_PACKAGE_redsocks2=m
          CONFIG_PACKAGE_shadowsocks-libev-ss-local=m
          CONFIG_PACKAGE_shadowsocks-libev-ss-redir=m
          CONFIG_PACKAGE_shadowsocks-libev-ss-server=m
          CONFIG_PACKAGE_shadowsocks-rust-sslocal=m
          CONFIG_PACKAGE_shadowsocksr-libev-ssr-check=m
          CONFIG_PACKAGE_shadowsocksr-libev-ssr-local=m
          CONFIG_PACKAGE_shadowsocksr-libev-ssr-redir=m
          CONFIG_PACKAGE_shadowsocksr-libev-ssr-server=m
          CONFIG_PACKAGE_trojan-go=m
          CONFIG_PACKAGE_trojan-plus=m
          CONFIG_PACKAGE_uhttpd=m
          CONFIG_PACKAGE_uhttpd-mod-ubus=m
          CONFIG_PACKAGE_v2ray-plugin=m
          CONFIG_PACKAGE_xray-plugin=m
          EOF
          #
          # ===============================================================
          # 
          make defconfig
          make download -j$(nproc) || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
      - name: Compile firmware
        run: |
          cd ./openwrt
          #20230907 22.03.5 package/custom/hysteria trojan-plus sing-box failed to build
          #make package/custom/hysteria/compile V=sc
          #make package/custom/sing-box/compile V=sc
          #make package/custom/trojan-plus/compile V=sc
          #make package/custom/xray-plugin/compile V=sc
          #make package/custom/v2ray-plugin/compile V=sc
          #make package/luci-app-passwall/{clean,compile} -j$(nproc)
          #make package/custom/luci-app-passwall/compile -j$(($(nproc)+1))
          #make package/custom/luci-app-passwall/compile V=sc
          #for ipk in $(find package/custom/* -maxdepth 0 -type d); do
          #  if [ -e "$ipk/Makefile" ]; then 
          #    #if [ ! `echo $ipk | grep -E "luci-app-adguardhome"` ] && [ ! `echo $ipk | grep -E "luci-app-filebrowser"` ]; then
          #    if [ ! `echo $ipk | grep -E "alist"` ] && [ ! `echo $ipk | grep -E "trojan-plus"` ]; then
          #      if [ `echo $ipk | grep -E "luci-"` ]; then
          #        make $ipk/{clean,compile} -j$(nproc) || make $ipk/compile V=s
          #      fi
          #    fi  
          #  fi
          #done 
          find package/feeds/ -maxdepth 1 -type d
          #find mexdepth and mindepth does not work or invalid
          ls -R -d package/feeds/*/luci-*
          #for ipk in $(ls -R -d package/feeds/kenzo/luci-*); do
          #  if [ -e "$ipk/Makefile" ]; then 
          #     make $ipk/{clean,compile} -j$(nproc) || make $ipk/compile V=s
          #  fi
          #done            
          for ipk in $(ls -R -d package/feeds/small/luci-*); do
            if [ -e "$ipk/Makefile" ]; then 
               if [ ! `echo $ipk | grep -E "shadowsocks-rust"` ]; then
                 make $ipk/{clean,compile} -j$(nproc) || make $ipk/compile V=s
               fi  
            fi
          done            
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true
      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          cd ./openwrt
          cd ./bin
          du -h ./ --max-depth=3
          tar -czvf ea8500.tar.xz targets packages
          cd -   
          cp ./bin/ea8500.tar.xz ../artifact/buildinfo/
          
          # rm -rf $(find ./bin/targets/ -type d -name "packages")
          # cp -rf $(find ./bin/targets/ -type f) ../artifact/firmware/
          # cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ../artifact/package/
          # cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ../artifact/buildinfo/
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

 #     - name: Upload release asset
 #       if: github.event == 'release'
 #       uses: svenstaro/upload-release-action@v2
 #       with:
 #         repo_token: ${{ secrets.YOURTOKEN }}
 #         file: ./artifact/firmware/*
 #         tag: ${{ github.ref }}
 #         file_glob: true
      # Publish a release if is a tag
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./bin/ea8500.tar.xz         
# This is a basic workflow to help you get started with Actions
